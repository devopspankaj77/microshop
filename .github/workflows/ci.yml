name: CI/CD Pipeline for Microshop

on:
  push:
    branches: ["main"]

env:
  REGISTRY: ghcr.io/${{ github.repository_owner }}
  FRONTEND_IMAGE: microshop/frontend
  BACKEND_IMAGE: microshop/backend

jobs:
  # ---------------- Build & Push Frontend ----------------
  build-frontend:
    name: Build & Push Frontend
    runs-on: self-hosted
    outputs:
      IMAGE_TAG: ${{ steps.set-tag.outputs.IMAGE_TAG }}
    steps:
      - uses: actions/checkout@v4

      - name: Log in to GHCR
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GHCR_PAT }}

      - name: Build Frontend Image
        run: |
          IMAGE_TAG=sha-${GITHUB_SHA::7}
          docker build -t $REGISTRY/$FRONTEND_IMAGE:$IMAGE_TAG ./frontend
          docker push $REGISTRY/$FRONTEND_IMAGE:$IMAGE_TAG

      - name: Set IMAGE_TAG for deployment
        id: set-tag
        run: echo "IMAGE_TAG=sha-${GITHUB_SHA::7}" >> $GITHUB_OUTPUT

      # --------- Trivy Cache ---------
      - name: Cache Trivy DB
        uses: actions/cache@v4
        with:
          path: ~/.cache/trivy
          key: ${{ runner.os }}-trivy-db

      # --------- Scan Frontend ---------
      - name: Scan Frontend Image
        uses: aquasecurity/trivy-action@0.18.0
        with:
          image-ref: $REGISTRY/$FRONTEND_IMAGE:sha-${GITHUB_SHA::7}
          github-pat: ${{ secrets.GHCR_PAT }}
          args: --severity HIGH,CRITICAL --exit-code 0 --scanners vuln

      # --------- Generate SBOM ---------
      - name: Generate SBOM Frontend
        uses: anchore/sbom-action@v0
        with:
          image: $REGISTRY/$FRONTEND_IMAGE:sha-${GITHUB_SHA::7}
          output-file: sbom-frontend.json

  # ---------------- Build & Push Backend ----------------
  build-backend:
    name: Build & Push Backend
    runs-on: self-hosted
    needs: build-frontend
    steps:
      - uses: actions/checkout@v4

      - name: Log in to GHCR
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GHCR_PAT }}

      - name: Build Backend Image
        run: |
          IMAGE_TAG=sha-${GITHUB_SHA::7}
          docker build -t $REGISTRY/$BACKEND_IMAGE:$IMAGE_TAG ./backend
          docker push $REGISTRY/$BACKEND_IMAGE:$IMAGE_TAG

      - name: Scan Backend Image
        uses: aquasecurity/trivy-action@0.18.0
        with:
          image-ref: $REGISTRY/$BACKEND_IMAGE:sha-${GITHUB_SHA::7}
          github-pat: ${{ secrets.GHCR_PAT }}
          args: --severity HIGH,CRITICAL --exit-code 0 --scanners vuln

      - name: Generate SBOM Backend
        uses: anchore/sbom-action@v0
        with:
          image: $REGISTRY/$BACKEND_IMAGE:sha-${GITHUB_SHA::7}
          output-file: sbom-backend.json

      # --------- Upload SBOMs ---------
      - name: Upload SBOM artifacts
        uses: actions/upload-artifact@v4
        with:
          name: sbom-reports
          path: |
            sbom-frontend.json
            sbom-backend.json

  # ---------------- Update K8s Manifests ----------------
  update-manifests:
    name: Update Kubernetes Manifests
    runs-on: self-hosted
    needs: [build-frontend, build-backend]
    steps:
      - uses: actions/checkout@v4

      - name: Update Frontend Deployment
        run: |
          sed -i "s|image: .*/frontend:.*|image: $REGISTRY/$FRONTEND_IMAGE:sha-${GITHUB_SHA::7}|" k8s/frontend-deployment.yaml

      - name: Update Backend Deployment
        run: |
          sed -i "s|image: .*/backend:.*|image: $REGISTRY/$BACKEND_IMAGE:sha-${GITHUB_SHA::7}|" k8s/backend-deployment.yaml

      - name: Commit & Push Changes
        run: |
          git config user.name "github-actions"
          git config user.email "actions@github.com"
          git add k8s/
          git commit -m "Update images to sha-${GITHUB_SHA::7}" || echo "No changes to commit"
          git push

  # ---------------- Deploy via ArgoCD ----------------
  deploy:
    name: Deploy via ArgoCD
    runs-on: self-hosted
    needs: update-manifests
    steps:
      - name: ArgoCD Sync
        env:
          ARGOCD_SERVER: ${{ secrets.ARGOCD_SERVER }}
          ARGOCD_USERNAME: ${{ secrets.ARGOCD_USERNAME }}
          ARGOCD_PASSWORD: ${{ secrets.ARGOCD_PASSWORD }}
        run: |
          argocd login $ARGOCD_SERVER --username $ARGOCD_USERNAME --password $ARGOCD_PASSWORD --insecure
          argocd app sync microshop

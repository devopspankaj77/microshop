name: CI/CD Pipeline for Microshop

on:
  push:
    branches: [ "main" ]

env:
  REGISTRY: ghcr.io
  IMAGE_NAME_BACKEND: devopspankaj77/microshop/backend
  IMAGE_NAME_FRONTEND: devopspankaj77/microshop/frontend

jobs:
  build-and-push:
    runs-on: self-hosted
    outputs:
      IMAGE_TAG: ${{ steps.set-tag.outputs.IMAGE_TAG }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Log in to GHCR
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GHCR_PAT }}

      - name: Build and Push Backend Image
        run: |
          IMAGE_TAG=sha-${GITHUB_SHA::7}
          docker build -t ghcr.io/devopspankaj77/microshop/backend:${IMAGE_TAG} ./backend
          docker push ghcr.io/devopspankaj77/microshop/backend:${IMAGE_TAG}


      - name: Build and Push Frontend Image
        run: |
          IMAGE_TAG=sha-${GITHUB_SHA::7}
          docker build -t ghcr.io/devopspankaj77/microshop/frontend:${IMAGE_TAG} ./frontend
          docker push ghcr.io/devopspankaj77/microshop/frontend:${IMAGE_TAG}


      - name: Set IMAGE_TAG for deployment
        id: set-tag
        run: echo "IMAGE_TAG=${{ github.sha }}" >> $GITHUB_OUTPUT
      
      # 🔐 Security scanning with Trivy

      - name: Cache Trivy DB
        uses: actions/cache@v4
        with:
          path: ~/.cache/trivy
          key: ${{ runner.os }}-trivy-db


      - name: Scan Backend Image
        uses: aquasecurity/trivy-action@0.18.0
        with:
          image-ref: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME_BACKEND }}:${{ github.sha }}
          github-pat: ${{ secrets.GHCR_PAT }}
          args: --severity HIGH,CRITICAL --scanners vuln



      - name: Scan Frontend Image
        uses: aquasecurity/trivy-action@0.18.0
        with:
          image-ref: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME_FRONTEND }}:${{ github.sha }}
          github-pat: ${{ secrets.GHCR_PAT }}
          args: --severity HIGH,CRITICAL --scanners vuln



      # 📦 Generate SBOM with Anchore (correct action)
      - name: Generate SBOM for Backend
        uses: anchore/sbom-action@v0
        with:
          image: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME_BACKEND }}:${{ github.sha }}
          output-file: sbom-backend.json

      - name: Generate SBOM for Frontend
        uses: anchore/sbom-action@v0
        with:
          image: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME_FRONTEND }}:${{ github.sha }}
          output-file: sbom-frontend.json

      # 📂 Save SBOM as artifact
      - name: Upload SBOM
        uses: actions/upload-artifact@v4
        with:
          name: sbom-reports
          path: |
            sbom-backend.json
            sbom-frontend.json

  deploy:
    needs: build-and-push
    runs-on: self-hosted
    env:
      IMAGE_TAG: ${{ needs.build-and-push.outputs.IMAGE_TAG }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up kubectl
        uses: azure/setup-kubectl@v4
        with:
          version: v1.30.0

      - name: Configure kubeconfig
        run: |
          mkdir -p ~/.kube
          echo "${{ secrets.KUBECONFIG }}" | base64 -d > ~/.kube/config

      - name: Deploy Namespace
        run: kubectl apply -f k8s/namespace.yaml

      - name: Update Deployment YAMLs
        run: |
          sed -i "s|__IMAGE_TAG__|${IMAGE_TAG}|g" k8s/backend-deployment.yaml
          sed -i "s|__IMAGE_TAG__|${IMAGE_TAG}|g" k8s/frontend-deployment.yaml

      # - name: Deploy to Kubernetes
      #   run: kubectl apply -f k8s/ -n microshop --recursive --prune

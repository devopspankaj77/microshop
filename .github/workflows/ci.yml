# name: CI/CD Pipeline for Microshop

# on:
#   push:
#     branches: ["main"]

# env:
#   REGISTRY: ghcr.io/${{ github.repository_owner }}
#   FRONTEND_IMAGE: microshop/frontend
#   BACKEND_IMAGE: microshop/backend

# jobs:
#   # ------------------- BUILD FRONTEND -------------------
#   build-frontend:
#     name: Build & Push Frontend
#     runs-on: self-hosted
#     steps:
#       - name: Checkout code
#         uses: actions/checkout@v4

#       - name: Log in to GHCR
#         uses: docker/login-action@v3
#         with:
#           registry: ghcr.io
#           username: ${{ github.actor }}
#           password: ${{ secrets.GHCR_PAT }}

#       - name: Build Frontend Image
#         run: |
#           docker build -t $REGISTRY/$FRONTEND_IMAGE:sha-${GITHUB_SHA::7} ./frontend

#       - name: Push Frontend Image
#         run: |
#           docker push $REGISTRY/$FRONTEND_IMAGE:sha-${GITHUB_SHA::7}

#   # ------------------- BUILD BACKEND -------------------
#   build-backend:
#     name: Build & Push Backend
#     runs-on: self-hosted
#     steps:
#       - name: Checkout code
#         uses: actions/checkout@v4

#       - name: Log in to GHCR
#         uses: docker/login-action@v3
#         with:
#           registry: ghcr.io
#           username: ${{ github.actor }}
#           password: ${{ secrets.GHCR_PAT }}

#       - name: Build Backend Image
#         run: |
#           docker build -t $REGISTRY/$BACKEND_IMAGE:sha-${GITHUB_SHA::7} ./backend

#       - name: Push Backend Image
#         run: |
#           docker push $REGISTRY/$BACKEND_IMAGE:sha-${GITHUB_SHA::7}

#   # ------------------- TRIVY SCAN FRONTEND -------------------
#   scan-frontend:
#     name: Scan Frontend Image
#     needs: build-frontend
#     runs-on: self-hosted
#     steps:
#       - name: Cache Trivy DB
#         uses: actions/cache@v4
#         with:
#           path: ~/.cache/trivy
#           key: ${{ runner.os }}-trivy-db

#       - name: Scan Frontend
#         uses: aquasecurity/trivy-action@0.18.0
#         with:
#           image-ref: ${{ env.REGISTRY }}/${{ env.FRONTEND_IMAGE }}:sha-${{ github.sha }}
#           github-pat: ${{ secrets.GHCR_PAT }}
#           args: --severity HIGH,CRITICAL --exit-code 0 --scanners vuln

#   # ------------------- TRIVY SCAN BACKEND -------------------
#   scan-backend:
#     name: Scan Backend Image
#     needs: build-backend
#     runs-on: self-hosted
#     steps:
#       - name: Cache Trivy DB
#         uses: actions/cache@v4
#         with:
#           path: ~/.cache/trivy
#           key: ${{ runner.os }}-trivy-db

#       - name: Scan Backend
#         uses: aquasecurity/trivy-action@0.18.0
#         with:
#           image-ref: ${{ env.REGISTRY }}/${{ env.BACKEND_IMAGE }}:sha-${{ github.sha }}
#           github-pat: ${{ secrets.GHCR_PAT }}
#           args: --severity HIGH,CRITICAL --exit-code 0 --scanners vuln

#   # ------------------- GENERATE SBOM -------------------
#   generate-sbom:
#     name: Generate SBOM
#     needs: [scan-frontend, scan-backend]
#     runs-on: self-hosted
#     steps:
#       - name: Generate SBOM for Frontend
#         uses: anchore/sbom-action@v0
#         with:
#           image: ${{ env.REGISTRY }}/${{ env.FRONTEND_IMAGE }}:sha-${{ github.sha }}
#           output-file: sbom-frontend.json

#       - name: Generate SBOM for Backend
#         uses: anchore/sbom-action@v0
#         with:
#           image: ${{ env.REGISTRY }}/${{ env.BACKEND_IMAGE }}:sha-${{ github.sha }}
#           output-file: sbom-backend.json

#       - name: Upload SBOM Artifacts
#         uses: actions/upload-artifact@v4
#         with:
#           name: sbom-reports
#           path: |
#             sbom-frontend.json
#             sbom-backend.json

#   # ------------------- UPDATE K8S MANIFESTS -------------------
#   update-manifests:
#     name: Update Kubernetes Manifests
#     needs: generate-sbom
#     runs-on: self-hosted
#     steps:
#       - uses: actions/checkout@v4

#       - name: Update Frontend Image Tag
#         run: |
#           sed -i "s|image: .*/frontend:.*|image: $REGISTRY/$FRONTEND_IMAGE:sha-${GITHUB_SHA::7}|" k8s/frontend-deployment.yaml

#       - name: Update Backend Image Tag
#         run: |
#           sed -i "s|image: .*/backend:.*|image: $REGISTRY/$BACKEND_IMAGE:sha-${GITHUB_SHA::7}|" k8s/backend-deployment.yaml

#       - name: Commit & Push Changes
#         run: |
#           git config user.name "github-actions"
#           git config user.email "actions@github.com"
#           git add k8s/
#           git commit -m "Update images to sha-${GITHUB_SHA::7}" || echo "No changes to commit"
#           git push

#   # ------------------- DEPLOY VIA ARGOCD -------------------
#   deploy:
#     name: Deploy via ArgoCD
#     needs: update-manifests
#     runs-on: self-hosted
#     steps:
#       - name: ArgoCD Sync
#         run: |
#           argocd login $ARGOCD_SERVER --username admin --password $ARGOCD_PASSWORD --insecure
#           argocd app sync microshop


name: CI/CD Pipeline for Microshop

on:
  push:
    branches: ["main"]

env:
  REGISTRY: ghcr.io/${{ github.repository_owner }}
  FRONTEND_IMAGE: microshop/frontend
  BACKEND_IMAGE: microshop/backend

jobs:
  build-and-push:
    runs-on: self-hosted
    outputs:
      IMAGE_TAG: ${{ steps.set-tag.outputs.IMAGE_TAG }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      # Set IMAGE_TAG as full Git SHA
      - name: Set IMAGE_TAG
        id: set-tag
        run: echo "IMAGE_TAG=${GITHUB_SHA}" >> $GITHUB_OUTPUT

      # Login to GHCR
      - name: Log in to GHCR
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GHCR_PAT }}

      # Build & push backend
      - name: Build & Push Backend
        run: |
          docker build -t $REGISTRY/$BACKEND_IMAGE:${{ steps.set-tag.outputs.IMAGE_TAG }} ./backend
          docker push $REGISTRY/$BACKEND_IMAGE:${{ steps.set-tag.outputs.IMAGE_TAG }}

      # Build & push frontend
      - name: Build & Push Frontend
        run: |
          docker build -t $REGISTRY/$FRONTEND_IMAGE:${{ steps.set-tag.outputs.IMAGE_TAG }} ./frontend
          docker push $REGISTRY/$FRONTEND_IMAGE:${{ steps.set-tag.outputs.IMAGE_TAG }}

      # Cache Trivy DB for faster scans
      - name: Cache Trivy DB
        uses: actions/cache@v4
        with:
          path: ~/.cache/trivy
          key: ${{ runner.os }}-trivy-db

      # Scan Backend Image
      - name: Scan Backend Image
        uses: aquasecurity/trivy-action@0.18.0
        with:
          image-ref: ghcr.io/${{ github.repository_owner }}/microshop/backend:${{ github.sha }}
          github-pat: ${{ secrets.GHCR_PAT }}
          args: --severity HIGH,CRITICAL --exit-code 0 --scanners vuln


      # Scan Frontend Image
      - name: Scan Frontend Image
        uses: aquasecurity/trivy-action@0.18.0
        with:
          image-ref: ghcr.io/${{ github.repository_owner }}/microshop/frontend:${{ github.sha }}
          github-pat: ${{ secrets.GHCR_PAT }}
          args: --severity HIGH,CRITICAL --exit-code 0 --scanners vuln


      # Generate SBOMs
      - name: SBOM Backend
        uses: anchore/sbom-action@v0
        with:
          image: $REGISTRY/$BACKEND_IMAGE:${{ steps.set-tag.outputs.IMAGE_TAG }}
          output-file: sbom-backend.json

      - name: SBOM Frontend
        uses: anchore/sbom-action@v0
        with:
          image: $REGISTRY/$FRONTEND_IMAGE:${{ steps.set-tag.outputs.IMAGE_TAG }}
          output-file: sbom-frontend.json

      # Upload SBOM artifacts
      - name: Upload SBOMs
        uses: actions/upload-artifact@v4
        with:
          name: sbom-reports
          path: |
            sbom-backend.json
            sbom-frontend.json

  update-manifests:
    runs-on: self-hosted
    needs: build-and-push
    steps:
      - uses: actions/checkout@v4

      # Replace image tags in Kubernetes YAMLs
      - name: Update Backend Deployment
        run: |
          sed -i "s|image: .*/backend:.*|image: $REGISTRY/$BACKEND_IMAGE:${{ needs.build-and-push.outputs.IMAGE_TAG }}|" k8s/backend-deployment.yaml

      - name: Update Frontend Deployment
        run: |
          sed -i "s|image: .*/frontend:.*|image: $REGISTRY/$FRONTEND_IMAGE:${{ needs.build-and-push.outputs.IMAGE_TAG }}|" k8s/frontend-deployment.yaml

      - name: Commit & Push Changes
        run: |
          git config user.name "github-actions"
          git config user.email "actions@github.com"
          git add k8s/
          git commit -m "Update images to ${{ needs.build-and-push.outputs.IMAGE_TAG }}" || echo "No changes"
          git push

  deploy:
    runs-on: self-hosted
    needs: update-manifests
    steps:
      - name: Deploy to Kubernetes via kubectl
        run: |
          mkdir -p ~/.kube
          echo "${{ secrets.KUBECONFIG }}" | base64 -d > ~/.kube/config
          kubectl apply -f k8s/namespace.yaml
          kubectl apply -f k8s/ -n microshop


